Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 85.62    116.70   116.70 16514950     0.00     0.00  Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int)
  5.80    124.61     7.91  8257410     0.00     0.00  Permutohedral::seqCompute_lower_left(float*, int, int, int) const
  1.56    126.74     2.13      220     0.01     0.01  Permutohedral::seqCompute(float*, float const*, int, bool) const
  0.89    127.95     1.21 16514950     0.00     0.00  std::vector<Permutohedral::Neighbors, std::allocator<Permutohedral::Neighbors> >::_M_default_append(unsigned long)
  0.84    129.09     1.14      286     0.00     0.00  dotProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1>&)
  0.62    129.93     0.84      126     0.01     1.04  PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const
  0.61    130.76     0.83 16514946     0.00     0.00  PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [clone .constprop.253]
  0.54    131.50     0.74 16514820     0.00     0.00  Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> >(Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> > const&)
  0.54    132.23     0.73 16514954     0.00     0.00  DenseKernel::features() const
  0.37    132.73     0.50      218     0.00     0.01  DenseKernel::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.32    133.16     0.43 16514820     0.00     0.00  Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&)
  0.29    133.55     0.39 24772238     0.00     0.00  PairwisePotential::~PairwisePotential()
  0.18    133.80     0.25      224     0.00     0.00  PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.18    134.04     0.24        6     0.04    21.82  PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const
  0.17    134.27     0.23 16514948     0.00     0.00  DenseKernel::~DenseKernel()
  0.15    134.47     0.20 16514946     0.00     0.00  PairwisePotential::~PairwisePotential()
  0.14    134.66     0.19       63     0.00     0.00  void std::__introsort_loop<int*, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1})
  0.14    134.85     0.19        3     0.06     0.13  sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)
  0.14    135.04     0.19        1     0.19     4.35  DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.10    135.18     0.14      104     0.00     0.00  Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >::lazyAssign<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&)
  0.08    135.29     0.11 16514950     0.00     0.00  DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int)
  0.07    135.38     0.09 16514950     0.00     0.00  Permutohedral::Permutohedral()
  0.07    135.47     0.09       35     0.00     0.00  Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&)
  0.06    135.55     0.09 16514839     0.00     0.00  Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&)
  0.04    135.61     0.06       34     0.00     0.00  descent_direction(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&)
  0.04    135.66     0.05 16514950     0.00     0.00  PottsCompatibility::PottsCompatibility(float)
  0.03    135.71     0.05                             MatrixCompatibility::setParameters(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&)
  0.03    135.75     0.04 16514820     0.00     0.00  Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, long, long, long, long)
  0.03    135.79     0.04 16514820     0.00     0.00  Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long, long, long, long)
  0.02    135.82     0.03 16514948     0.00     0.00  PottsCompatibility::~PottsCompatibility()
  0.02    135.85     0.03        1     0.03   131.53  DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const
  0.02    135.88     0.03       42     0.00     0.00  ConstUnaryEnergy::get() const
  0.02    135.91     0.03                             Kernel::~Kernel()
  0.02    135.94     0.03                             DenseKernel::ntype() const
  0.02    135.97     0.03                             PairwisePotential::apply_lower2(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const
  0.02    136.00     0.03                             PairwisePotential::applyTranspose(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.02    136.03     0.03                             DiagonalCompatibility::matrixForm(int) const
  0.01    136.05     0.02   153600     0.00     0.00  std::pair<std::_Rb_tree_iterator<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, bool> std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_insert_unique<Eigen::Matrix<float, -1, 1, 0, -1, 1> const&>(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&)
  0.01    136.07     0.02        1     0.02     0.02  load_unary(std::string const&, img_size&)
  0.01    136.09     0.02                             Eigen::DiagonalProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::DiagonalWrapper<Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 2>::DiagonalProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::DiagonalWrapper<Eigen::Matrix<float, -1, 1, 0, -1, 1> const> const&)
  0.01    136.11     0.02                             Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>::run(long, long, long, float const*, long, float const*, long, float*, long, float, Eigen::internal::level3_blocking<float, float>&, Eigen::internal::GemmParallelInfo<long>*)
  0.01    136.13     0.02                             Permutohedral::sseCompute(float*, float const*, int, bool) const
  0.01    136.14     0.02 16514828     0.00     0.00  PottsCompatibility::parameters() const
  0.01    136.16     0.02                             Permutohedral::gradient(float*, float const*, float const*, int) const
  0.01    136.17     0.01  8257410     0.00     0.00  Permutohedral::compute_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const
  0.01    136.18     0.01    76800     0.00     0.00  void std::__introsort_loop<int*, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1})
  0.01    136.19     0.01       39     0.00     0.00  Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&)
  0.01    136.20     0.01        2     0.01     0.01  valid_probability(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&)
  0.01    136.21     0.01        2     0.01     0.01  Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&)
  0.01    136.22     0.01        2     0.01     0.01  Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&)
  0.01    136.23     0.01        2     0.01     0.01  std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_erase(std::_Rb_tree_node<Eigen::Matrix<float, -1, 1, 0, -1, 1> >*)
  0.01    136.24     0.01        1     0.01     0.01  expAndNormalize(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&)
  0.01    136.25     0.01        1     0.01     0.02  sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)
  0.01    136.26     0.01                             DenseKernel::merge(Kernel const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool)
  0.01    136.27     0.01                             Permutohedral::add(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&)
  0.01    136.28     0.01                             Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false>::~gemm_blocking_space()
  0.01    136.29     0.01                             DenseKernel::parameters() const
  0.00    136.29     0.01                             AlphaCRF::sequential_inference()
  0.00    136.29     0.00  8257410     0.00     0.00  DenseKernel::apply_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const
  0.00    136.29     0.00   501020     0.00     0.00  DenseCRF2D::~DenseCRF2D()
  0.00    136.29     0.00   307200     0.00     0.00  Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long)
  0.00    136.29     0.00   117013     0.00     0.00  Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&)
  0.00    136.29     0.00    76863     0.00     0.00  void Eigen::internal::gemv_selector<2, 0, true>::run<Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>, Eigen::Matrix<float, -1, 1, 0, -1, 1> >(Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4> const&, Eigen::Matrix<float, -1, 1, 0, -1, 1>&, Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>::Scalar const&)
  0.00    136.29     0.00    76800     0.00     0.00  Eigen::Matrix<float, -1, 1, 0, -1, 1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, 1, 0, -1, 1> >::lazyAssign<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> >(Eigen::DenseBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> > const&)
  0.00    136.29     0.00    76800     0.00     0.00  Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>, 3, 0>::run(Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> const&, Eigen::internal::scalar_sum_op<float> const&)
  0.00    136.29     0.00      723     0.00     0.00  Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long)
  0.00    136.29     0.00      218     0.00     0.00  Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const
  0.00    136.29     0.00      218     0.00     0.01  PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.00    136.29     0.00       40     0.00     0.00  DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType)
  0.00    136.29     0.00       35     0.00     0.05  DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.00    136.29     0.00        8     0.00     0.00  PairwisePotential::parameters() const
  0.00    136.29     0.00        6     0.00     0.00  Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&)
  0.00    136.29     0.00        4     0.00     0.00  PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int)
  0.00    136.29     0.00        3     0.00     0.00  Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(long)
  0.00    136.29     0.00        3     0.00     0.00  _init
  0.00    136.29     0.00        2     0.00     0.00  DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType)
  0.00    136.29     0.00        2     0.00     0.00  DenseKernel::ktype() const
  0.00    136.29     0.00        2     0.00     0.01  Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const
  0.00    136.29     0.00        2     0.00     0.00  PairwisePotential::ktype() const
  0.00    136.29     0.00        2     0.00     0.00  PairwisePotential::features() const
  0.00    136.29     0.00        2     0.00     0.01  DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const
  0.00    136.29     0.00        2     0.00    43.81  DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const
  0.00    136.29     0.00        2     0.00     0.00  void std::vector<PairwisePotential*, std::allocator<PairwisePotential*> >::_M_emplace_back_aux<PairwisePotential* const&>(PairwisePotential* const&)
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z17get_next_labelingRN5Eigen6MatrixIiLin1ELi1ELi0ELin1ELi1EEEi
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z17normalize_unariesRN5Eigen6MatrixIfLin1ELin1ELi0ELin1ELin1EEE
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z35get_color_to_label_map_from_datasetRKSs
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z8make_dirSs
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN13PermutohedralC2Ev
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN16Potts_weight_setC2Efffff
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6KernelD2Ev
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN8DenseCRFC2Eii
  0.00    136.29     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00    136.29     0.00        1     0.00     0.00  load_image(std::string const&, img_size)
  0.00    136.29     0.00        1     0.00     0.00  write_down_perf(double, double, double, std::string)
  0.00    136.29     0.00        1     0.00     0.00  save_map(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, img_size const&, std::string const&, std::string const&)
  0.00    136.29     0.00        1     0.00     0.00  DenseCRF2D::addPairwiseGaussian(float, float, LabelCompatibility*, KernelType, NormalizationType)
  0.00    136.29     0.00        1     0.00     0.00  DenseCRF2D::DenseCRF2D(int, int, int)
  0.00    136.29     0.00        1     0.00     0.00  DenseCRF2D::~DenseCRF2D()
  0.00    136.29     0.00        1     0.00     0.00  ConstUnaryEnergy::ConstUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&)
  0.00    136.29     0.00        1     0.00     0.00  ConstUnaryEnergy::~ConstUnaryEnergy()
  0.00    136.29     0.00        1     0.00     0.00  Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const>::CwiseBinaryOp(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::internal::scalar_difference_op<float> const&)
  0.00    136.29     0.00        1     0.00     0.00  Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&)
  0.00    136.29     0.00        1     0.00     0.00  Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >::operator=(Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> const&)
  0.00    136.29     0.00        1     0.00     0.00  Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >(Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> > const&)
  0.00    136.29     0.00        1     0.00     0.00  float* Eigen::internal::conditional_aligned_new_auto<float, true>(unsigned long)
  0.00    136.29     0.00        1     0.00     0.00  DenseCRF::setUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&)
  0.00    136.29     0.00        1     0.00     0.00  DenseCRF::~DenseCRF()
  0.00    136.29     0.00        1     0.00     0.00  ProbImage::decompress(char const*)
  0.00    136.29     0.00        1     0.00     0.00  ProbImage::boostToProb()
  0.00    136.29     0.00        1     0.00     0.00  ProbImage::ProbImage()
  0.00    136.29     0.00        1     0.00     0.00  ProbImage::~ProbImage()
  0.00    136.29     0.00        1     0.00     0.00  DenseCRF::currentMap(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.00    136.29     0.00        1     0.00     0.01  DenseCRF::unary_init() const
  0.00    136.29     0.00        1     0.00     0.00  DenseCRF::unaryEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const
  0.00    136.29     0.00        1     0.00     0.04  DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  0.00    136.29     0.00        1     0.00     0.03  DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.01% of 136.29 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.8    0.00  135.98                 minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
                0.03  131.50       1/1           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.19    4.16       1/1           DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
                0.00    0.04       1/1           DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [35]
                0.00    0.03       1/1           DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [43]
                0.02    0.00       1/1           load_unary(std::string const&, img_size&) [46]
                0.00    0.01       1/1           DenseCRF::unary_init() const [54]
                0.00    0.00       1/1           DenseCRF2D::addPairwiseGaussian(float, float, LabelCompatibility*, KernelType, NormalizationType) [72]
                0.00    0.00       1/40          DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [71]
                0.00    0.00       1/1           DenseCRF::~DenseCRF() [74]
                0.00    0.00       2/16514950     PottsCompatibility::PottsCompatibility(float) [31]
                0.00    0.00       1/1           load_image(std::string const&, img_size) [107]
                0.00    0.00       1/1           DenseCRF2D::DenseCRF2D(int, int, int) [110]
                0.00    0.00       1/1           DenseCRF::setUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [119]
                0.00    0.00       1/1           DenseCRF::currentMap(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [124]
                0.00    0.00       1/1           write_down_perf(double, double, double, std::string) [108]
                0.00    0.00       1/1           save_map(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, img_size const&, std::string const&, std::string const&) [109]
                0.00    0.00       1/1           DenseCRF2D::~DenseCRF2D() [111]
-----------------------------------------------
                0.03  131.50       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[2]     96.5    0.03  131.50       1         DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00   87.63       2/2           DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
                0.08   43.57       2/6           PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.06    0.06       1/3           sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [21]
                0.00    0.02       2/218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
                0.02    0.00  153600/153600      std::pair<std::_Rb_tree_iterator<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, bool> std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_insert_unique<Eigen::Matrix<float, -1, 1, 0, -1, 1> const&>(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [45]
                0.01    0.01       1/1           sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [47]
                0.01    0.00       2/2           valid_probability(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [58]
                0.01    0.00       2/2           Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [60]
                0.01    0.00       2/2           std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_erase(std::_Rb_tree_node<Eigen::Matrix<float, -1, 1, 0, -1, 1> >*) [61]
                0.00    0.00       2/104         Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >::lazyAssign<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [26]
                0.00    0.00       2/224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
                0.00    0.00       4/39          Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [57]
                0.00    0.00       1/42          ConstUnaryEnergy::get() const [37]
                0.00    0.00       2/4           PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [69]
                0.00    0.00       4/40          DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [71]
                0.00    0.00       2/2           PairwisePotential::features() const [73]
                0.00    0.00       7/16514839     Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [29]
                0.00    0.00       2/16514950     PottsCompatibility::PottsCompatibility(float) [31]
                0.00    0.00       4/8           PairwisePotential::parameters() const [75]
                0.00    0.00  230400/307200      Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long) [85]
                0.00    0.00   76800/501020      DenseCRF2D::~DenseCRF2D() [84]
                0.00    0.00   76800/76800       Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>, 3, 0>::run(Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> const&, Eigen::internal::scalar_sum_op<float> const&) [89]
                0.00    0.00   76800/76800       Eigen::Matrix<float, -1, 1, 0, -1, 1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, 1, 0, -1, 1> >::lazyAssign<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> >(Eigen::DenseBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> > const&) [88]
                0.00    0.00       5/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
                0.00    0.00       3/3           _init [94]
                0.00    0.00       2/2           DenseKernel::ktype() const [95]
                0.00    0.00       2/2           PairwisePotential::ktype() const [96]
-----------------------------------------------
                0.08   43.57       2/6           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.16   87.14       4/6           DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
[3]     96.1    0.24  130.70       6         PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.84  129.86     126/126         PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
                0.01    0.00       6/224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
                0.00    0.00     126/16514946     PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [clone .constprop.253] [5]
                0.00    0.00     126/16514946     PairwisePotential::~PairwisePotential() [24]
                0.00    0.00     126/16514948     DenseKernel::~DenseKernel() [23]
                0.00    0.00     126/16514950     PottsCompatibility::PottsCompatibility(float) [31]
                0.00    0.00       6/16514954     DenseKernel::features() const [18]
                0.00    0.00     132/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
                0.00    0.00       6/6           Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [92]
-----------------------------------------------
                             16514820             PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
                0.84  129.86     126/126         PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
[4]     95.9    0.84  129.86     126+16514820 PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
                0.83  118.13 16514820/16514946     PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [clone .constprop.253] [5]
                7.91    0.00 8257410/8257410     Permutohedral::seqCompute_lower_left(float*, int, int, int) const [9]
                0.74    0.00 16514820/16514820     Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> >(Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> > const&) [17]
                0.73    0.00 16514946/16514954     DenseKernel::features() const [18]
                0.43    0.00 16514820/16514820     Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [19]
                0.39    0.00 24772230/24772238     PairwisePotential::~PairwisePotential() [20]
                0.20    0.03 16514820/16514946     PairwisePotential::~PairwisePotential() [24]
                0.23    0.00 16514820/16514948     DenseKernel::~DenseKernel() [23]
                0.09    0.00 16514820/16514839     Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [29]
                0.05    0.00 16514820/16514950     PottsCompatibility::PottsCompatibility(float) [31]
                0.04    0.00 16514820/16514820     Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, long, long, long, long) [33]
                0.04    0.00 16514820/16514820     Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long, long, long, long) [34]
                0.02    0.00 16514820/16514828     PottsCompatibility::parameters() const [52]
                0.01    0.00 8257410/8257410     Permutohedral::compute_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const [55]
                0.00    0.00 8257410/8257410     DenseKernel::apply_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const [83]
                             16514820             PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
-----------------------------------------------
                0.00    0.00     126/16514946     PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.83  118.13 16514820/16514946     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[5]     87.3    0.83  118.13 16514946         PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [clone .constprop.253] [5]
                0.11  117.93 16514946/16514950     DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [6]
                0.09    0.00 16514946/16514950     Permutohedral::Permutohedral() [27]
-----------------------------------------------
                0.00    0.00       4/16514950     PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [69]
                0.11  117.93 16514946/16514950     PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [clone .constprop.253] [5]
[6]     86.6    0.11  117.93 16514950         DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [6]
              116.70    1.21 16514950/16514950     Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [7]
                0.00    0.02       2/2           Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const [51]
                0.00    0.00       2/24772238     PairwisePotential::~PairwisePotential() [20]
                0.00    0.00       2/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
              116.70    1.21 16514950/16514950     DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [6]
[7]     86.5  116.70    1.21 16514950         Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [7]
                1.21    0.00 16514950/16514950     std::vector<Permutohedral::Neighbors, std::allocator<Permutohedral::Neighbors> >::_M_default_append(unsigned long) [15]
-----------------------------------------------
                0.00   87.63       2/2           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[8]     64.3    0.00   87.63       2         DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
                0.16   87.14       4/6           PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.13    0.13       2/3           sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [21]
                0.00    0.05       4/218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
                0.02    0.00       6/286         dotProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1>&) [16]
                0.00    0.00       4/224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
                0.00    0.00       2/42          ConstUnaryEnergy::get() const [37]
                0.00    0.00       4/8           PairwisePotential::parameters() const [75]
-----------------------------------------------
                7.91    0.00 8257410/8257410     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[9]      5.8    7.91    0.00 8257410         Permutohedral::seqCompute_lower_left(float*, int, int, int) const [9]
-----------------------------------------------
                0.19    4.16       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[10]     3.2    0.19    4.16       1         DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
                0.00    1.73      35/35          DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [14]
                0.00    1.65     138/218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
                0.41    0.00     102/286         dotProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1>&) [16]
                0.15    0.00     138/224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
                0.14    0.00     102/104         Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >::lazyAssign<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [26]
                0.06    0.00      34/34          descent_direction(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [30]
                0.01    0.00       2/2           Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [59]
                0.01    0.00      35/39          Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [57]
                0.00    0.00       1/42          ConstUnaryEnergy::get() const [37]
                0.00    0.00      35/40          DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [71]
                0.00    0.00       8/16514839     Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [29]
                0.00    0.00      34/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
                0.00    0.00       2/501020      DenseCRF2D::~DenseCRF2D() [84]
                0.00    0.00       1/1           Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >(Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> > const&) [117]
                0.00    0.00       1/1           Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >::operator=(Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> const&) [116]
                0.00    0.00       1/1           Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const>::CwiseBinaryOp(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::internal::scalar_difference_op<float> const&) [114]
                0.00    0.00       1/1           Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [115]
-----------------------------------------------
                0.50    2.11     218/218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
[11]     1.9    0.50    2.11     218         DenseKernel::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [11]
                2.11    0.00     218/220         Permutohedral::seqCompute(float*, float const*, int, bool) const [13]
                0.00    0.00     430/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
                0.00    0.00     218/218         Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const [91]
-----------------------------------------------
                0.00    0.02       2/218         DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [35]
                0.00    0.02       2/218         DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const [44]
                0.00    0.02       2/218         DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.05       4/218         DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
                0.00    0.84      70/218         DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [14]
                0.00    1.65     138/218         DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[12]     1.9    0.00    2.61     218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
                0.50    2.11     218/218         DenseKernel::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [11]
-----------------------------------------------
                0.02    0.00       2/220         Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const [51]
                2.11    0.00     218/220         DenseKernel::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [11]
[13]     1.6    2.13    0.00     220         Permutohedral::seqCompute(float*, float const*, int, bool) const [13]
-----------------------------------------------
                0.00    1.73      35/35          DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[14]     1.3    0.00    1.73      35         DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [14]
                0.00    0.84      70/218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
                0.70    0.00     175/286         dotProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1>&) [16]
                0.09    0.00      35/35          Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [28]
                0.08    0.00      70/224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
                0.03    0.00      35/42          ConstUnaryEnergy::get() const [37]
-----------------------------------------------
                1.21    0.00 16514950/16514950     Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [7]
[15]     0.9    1.21    0.00 16514950         std::vector<Permutohedral::Neighbors, std::allocator<Permutohedral::Neighbors> >::_M_default_append(unsigned long) [15]
-----------------------------------------------
                0.01    0.00       3/286         DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [35]
                0.02    0.00       6/286         DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
                0.41    0.00     102/286         DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
                0.70    0.00     175/286         DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [14]
[16]     0.8    1.14    0.00     286         dotProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1>&) [16]
-----------------------------------------------
                0.74    0.00 16514820/16514820     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[17]     0.5    0.74    0.00 16514820         Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> >(Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> > const&) [17]
-----------------------------------------------
                0.00    0.00       2/16514954     PairwisePotential::features() const [73]
                0.00    0.00       6/16514954     PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.73    0.00 16514946/16514954     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[18]     0.5    0.73    0.00 16514954         DenseKernel::features() const [18]
-----------------------------------------------
                0.43    0.00 16514820/16514820     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[19]     0.3    0.43    0.00 16514820         Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [19]
-----------------------------------------------
                0.00    0.00       2/24772238     DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [6]
                0.00    0.00       2/24772238     DenseCRF::~DenseCRF() [74]
                0.00    0.00       4/24772238     PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [69]
                0.39    0.00 24772230/24772238     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[20]     0.3    0.39    0.00 24772238         PairwisePotential::~PairwisePotential() [20]
                0.00    0.00       2/16514948     DenseKernel::~DenseKernel() [23]
                0.00    0.00       2/16514948     PottsCompatibility::~PottsCompatibility() [36]
-----------------------------------------------
                0.06    0.06       1/3           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.13    0.13       2/3           DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
[21]     0.3    0.19    0.19       3         sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [21]
                0.19    0.00      63/63          void std::__introsort_loop<int*, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [25]
                0.00    0.00      63/76863       void Eigen::internal::gemv_selector<2, 0, true>::run<Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>, Eigen::Matrix<float, -1, 1, 0, -1, 1> >(Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4> const&, Eigen::Matrix<float, -1, 1, 0, -1, 1>&, Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>::Scalar const&) [87]
-----------------------------------------------
                0.00    0.00       2/224         DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [35]
                0.00    0.00       2/224         DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const [44]
                0.00    0.00       2/224         DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.00       4/224         DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
                0.01    0.00       6/224         PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.08    0.00      70/224         DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [14]
                0.15    0.00     138/224         DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[22]     0.2    0.25    0.00     224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
-----------------------------------------------
                0.00    0.00       2/16514948     PairwisePotential::~PairwisePotential() [20]
                0.00    0.00     126/16514948     PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.23    0.00 16514820/16514948     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[23]     0.2    0.23    0.00 16514948         DenseKernel::~DenseKernel() [23]
-----------------------------------------------
                0.00    0.00     126/16514946     PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.20    0.03 16514820/16514946     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[24]     0.2    0.20    0.03 16514946         PairwisePotential::~PairwisePotential() [24]
                0.03    0.00 16514946/16514948     PottsCompatibility::~PottsCompatibility() [36]
-----------------------------------------------
                              414449             void std::__introsort_loop<int*, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [25]
                0.19    0.00      63/63          sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [21]
[25]     0.1    0.19    0.00      63+414449  void std::__introsort_loop<int*, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [25]
                              414449             void std::__introsort_loop<int*, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [25]
-----------------------------------------------
                0.00    0.00       2/104         DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.14    0.00     102/104         DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[26]     0.1    0.14    0.00     104         Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >::lazyAssign<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [26]
-----------------------------------------------
                0.00    0.00       4/16514950     PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [69]
                0.09    0.00 16514946/16514950     PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [clone .constprop.253] [5]
[27]     0.1    0.09    0.00 16514950         Permutohedral::Permutohedral() [27]
-----------------------------------------------
                0.09    0.00      35/35          DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [14]
[28]     0.1    0.09    0.00      35         Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [28]
                0.00    0.00      35/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                0.00    0.00       1/16514839     DenseCRF2D::addPairwiseGaussian(float, float, LabelCompatibility*, KernelType, NormalizationType) [72]
                0.00    0.00       1/16514839     DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [71]
                0.00    0.00       2/16514839     DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const [44]
                0.00    0.00       7/16514839     DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.00       8/16514839     DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
                0.09    0.00 16514820/16514839     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[29]     0.1    0.09    0.00 16514839         Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [29]
-----------------------------------------------
                0.06    0.00      34/34          DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[30]     0.0    0.06    0.00      34         descent_direction(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [30]
-----------------------------------------------
                0.00    0.00       2/16514950     minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
                0.00    0.00       2/16514950     DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.00     126/16514950     PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.05    0.00 16514820/16514950     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[31]     0.0    0.05    0.00 16514950         PottsCompatibility::PottsCompatibility(float) [31]
-----------------------------------------------
                                                 <spontaneous>
[32]     0.0    0.05    0.00                 MatrixCompatibility::setParameters(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [32]
-----------------------------------------------
                0.04    0.00 16514820/16514820     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[33]     0.0    0.04    0.00 16514820         Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, long, long, long, long) [33]
-----------------------------------------------
                0.04    0.00 16514820/16514820     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[34]     0.0    0.04    0.00 16514820         Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long, long, long, long) [34]
-----------------------------------------------
                0.00    0.04       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[35]     0.0    0.00    0.04       1         DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [35]
                0.00    0.02       2/218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
                0.01    0.00       3/286         dotProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1>&) [16]
                0.00    0.00       2/224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
                0.00    0.00       1/42          ConstUnaryEnergy::get() const [37]
-----------------------------------------------
                0.00    0.00       2/16514948     PairwisePotential::~PairwisePotential() [20]
                0.03    0.00 16514946/16514948     PairwisePotential::~PairwisePotential() [24]
[36]     0.0    0.03    0.00 16514948         PottsCompatibility::~PottsCompatibility() [36]
-----------------------------------------------
                0.00    0.00       1/42          DenseCRF::unaryEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [68]
                0.00    0.00       1/42          DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [35]
                0.00    0.00       1/42          DenseCRF::unary_init() const [54]
                0.00    0.00       1/42          DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
                0.00    0.00       1/42          DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.00       2/42          DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
                0.03    0.00      35/42          DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [14]
[37]     0.0    0.03    0.00      42         ConstUnaryEnergy::get() const [37]
-----------------------------------------------
                                                 <spontaneous>
[38]     0.0    0.03    0.00                 Kernel::~Kernel() [38]
-----------------------------------------------
                                                 <spontaneous>
[39]     0.0    0.03    0.00                 DenseKernel::ntype() const [39]
-----------------------------------------------
                                                 <spontaneous>
[40]     0.0    0.03    0.00                 PairwisePotential::apply_lower2(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [40]
-----------------------------------------------
                                                 <spontaneous>
[41]     0.0    0.03    0.00                 PairwisePotential::applyTranspose(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [41]
-----------------------------------------------
                                                 <spontaneous>
[42]     0.0    0.03    0.00                 DiagonalCompatibility::matrixForm(int) const [42]
-----------------------------------------------
                0.00    0.03       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[43]     0.0    0.00    0.03       1         DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [43]
                0.00    0.03       2/2           DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const [44]
                0.00    0.00       1/1           DenseCRF::unaryEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [68]
                0.00    0.00       2/501020      DenseCRF2D::~DenseCRF2D() [84]
                0.00    0.00       1/3           Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(long) [93]
                0.00    0.00       1/1           float* Eigen::internal::conditional_aligned_new_auto<float, true>(unsigned long) [118]
-----------------------------------------------
                0.00    0.03       2/2           DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [43]
[44]     0.0    0.00    0.03       2         DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const [44]
                0.00    0.02       2/218         PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [12]
                0.00    0.00       2/224         PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [22]
                0.00    0.00       2/16514839     Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [29]
                0.00    0.00       2/501020      DenseCRF2D::~DenseCRF2D() [84]
                0.00    0.00       2/3           Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(long) [93]
-----------------------------------------------
                0.02    0.00  153600/153600      DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[45]     0.0    0.02    0.00  153600         std::pair<std::_Rb_tree_iterator<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, bool> std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_insert_unique<Eigen::Matrix<float, -1, 1, 0, -1, 1> const&>(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [45]
                0.00    0.00  117013/117013      Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [86]
-----------------------------------------------
                0.02    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[46]     0.0    0.02    0.00       1         load_unary(std::string const&, img_size&) [46]
                0.00    0.00       1/1           ProbImage::ProbImage() [122]
                0.00    0.00       1/1           ProbImage::decompress(char const*) [120]
                0.00    0.00       1/1           ProbImage::boostToProb() [121]
                0.00    0.00       1/1           ProbImage::~ProbImage() [123]
-----------------------------------------------
                0.01    0.01       1/1           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[47]     0.0    0.01    0.01       1         sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [47]
                0.01    0.00   76800/76800       void std::__introsort_loop<int*, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [56]
                0.00    0.00   76800/76863       void Eigen::internal::gemv_selector<2, 0, true>::run<Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>, Eigen::Matrix<float, -1, 1, 0, -1, 1> >(Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4> const&, Eigen::Matrix<float, -1, 1, 0, -1, 1>&, Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>::Scalar const&) [87]
-----------------------------------------------
                                                 <spontaneous>
[48]     0.0    0.02    0.00                 Eigen::DiagonalProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::DiagonalWrapper<Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 2>::DiagonalProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::DiagonalWrapper<Eigen::Matrix<float, -1, 1, 0, -1, 1> const> const&) [48]
-----------------------------------------------
                                                 <spontaneous>
[49]     0.0    0.02    0.00                 Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>::run(long, long, long, float const*, long, float const*, long, float*, long, float, Eigen::internal::level3_blocking<float, float>&, Eigen::internal::GemmParallelInfo<long>*) [49]
-----------------------------------------------
                                                 <spontaneous>
[50]     0.0    0.02    0.00                 Permutohedral::sseCompute(float*, float const*, int, bool) const [50]
-----------------------------------------------
                0.00    0.02       2/2           DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [6]
[51]     0.0    0.00    0.02       2         Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const [51]
                0.02    0.00       2/220         Permutohedral::seqCompute(float*, float const*, int, bool) const [13]
-----------------------------------------------
                0.00    0.00       8/16514828     PairwisePotential::parameters() const [75]
                0.02    0.00 16514820/16514828     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[52]     0.0    0.02    0.00 16514828         PottsCompatibility::parameters() const [52]
-----------------------------------------------
                                                 <spontaneous>
[53]     0.0    0.02    0.00                 Permutohedral::gradient(float*, float const*, float const*, int) const [53]
-----------------------------------------------
                0.00    0.01       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[54]     0.0    0.00    0.01       1         DenseCRF::unary_init() const [54]
                0.01    0.00       1/1           expAndNormalize(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [62]
                0.00    0.00       1/42          ConstUnaryEnergy::get() const [37]
-----------------------------------------------
                0.01    0.00 8257410/8257410     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[55]     0.0    0.01    0.00 8257410         Permutohedral::compute_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const [55]
-----------------------------------------------
                               77065             void std::__introsort_loop<int*, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [56]
                0.01    0.00   76800/76800       sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [47]
[56]     0.0    0.01    0.00   76800+77065   void std::__introsort_loop<int*, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [56]
                               77065             void std::__introsort_loop<int*, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) [56]
-----------------------------------------------
                0.00    0.00       4/39          DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.01    0.00      35/39          DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[57]     0.0    0.01    0.00      39         Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [57]
                0.00    0.00      39/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                0.01    0.00       2/2           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[58]     0.0    0.01    0.00       2         valid_probability(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [58]
-----------------------------------------------
                0.01    0.00       2/2           DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[59]     0.0    0.01    0.00       2         Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [59]
-----------------------------------------------
                0.01    0.00       2/2           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[60]     0.0    0.01    0.00       2         Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [60]
-----------------------------------------------
                              117013             std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_erase(std::_Rb_tree_node<Eigen::Matrix<float, -1, 1, 0, -1, 1> >*) [61]
                0.01    0.00       2/2           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[61]     0.0    0.01    0.00       2+117013  std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_erase(std::_Rb_tree_node<Eigen::Matrix<float, -1, 1, 0, -1, 1> >*) [61]
                              117013             std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_erase(std::_Rb_tree_node<Eigen::Matrix<float, -1, 1, 0, -1, 1> >*) [61]
-----------------------------------------------
                0.01    0.00       1/1           DenseCRF::unary_init() const [54]
[62]     0.0    0.01    0.00       1         expAndNormalize(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [62]
                0.00    0.00  230400/501020      DenseCRF2D::~DenseCRF2D() [84]
                0.00    0.00   76800/307200      Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long) [85]
                0.00    0.00       1/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                                                 <spontaneous>
[63]     0.0    0.01    0.00                 DenseKernel::merge(Kernel const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) [63]
-----------------------------------------------
                                                 <spontaneous>
[64]     0.0    0.01    0.00                 Permutohedral::add(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [64]
-----------------------------------------------
                                                 <spontaneous>
[65]     0.0    0.01    0.00                 Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false>::~gemm_blocking_space() [65]
-----------------------------------------------
                                                 <spontaneous>
[66]     0.0    0.01    0.00                 DenseKernel::parameters() const [66]
-----------------------------------------------
                                                 <spontaneous>
[67]     0.0    0.01    0.00                 AlphaCRF::sequential_inference() [67]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [43]
[68]     0.0    0.00    0.00       1         DenseCRF::unaryEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [68]
                0.00    0.00       1/42          ConstUnaryEnergy::get() const [37]
                0.00    0.00       1/501020      DenseCRF2D::~DenseCRF2D() [84]
-----------------------------------------------
                0.00    0.00       2/4           DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) [70]
                0.00    0.00       2/4           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[69]     0.0    0.00    0.00       4         PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [69]
                0.00    0.00       4/16514950     DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [6]
                0.00    0.00       4/24772238     PairwisePotential::~PairwisePotential() [20]
                0.00    0.00       4/16514950     Permutohedral::Permutohedral() [27]
                0.00    0.00       4/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                0.00    0.00       1/2           DenseCRF2D::addPairwiseGaussian(float, float, LabelCompatibility*, KernelType, NormalizationType) [72]
                0.00    0.00       1/2           DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [71]
[70]     0.0    0.00    0.00       2         DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) [70]
                0.00    0.00       2/4           PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [69]
                0.00    0.00       2/2           void std::vector<PairwisePotential*, std::allocator<PairwisePotential*> >::_M_emplace_back_aux<PairwisePotential* const&>(PairwisePotential* const&) [97]
-----------------------------------------------
                0.00    0.00       1/40          minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
                0.00    0.00       4/40          DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.00      35/40          DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[71]     0.0    0.00    0.00      40         DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [71]
                0.00    0.00       1/2           DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) [70]
                0.00    0.00       1/16514839     Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [29]
                0.00    0.00      39/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[72]     0.0    0.00    0.00       1         DenseCRF2D::addPairwiseGaussian(float, float, LabelCompatibility*, KernelType, NormalizationType) [72]
                0.00    0.00       1/2           DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) [70]
                0.00    0.00       1/16514839     Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [29]
-----------------------------------------------
                0.00    0.00       2/2           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[73]     0.0    0.00    0.00       2         PairwisePotential::features() const [73]
                0.00    0.00       2/16514954     DenseKernel::features() const [18]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[74]     0.0    0.00    0.00       1         DenseCRF::~DenseCRF() [74]
                0.00    0.00       2/24772238     PairwisePotential::~PairwisePotential() [20]
                0.00    0.00       1/1           ConstUnaryEnergy::~ConstUnaryEnergy() [113]
-----------------------------------------------
                0.00    0.00       4/8           DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const [8]
                0.00    0.00       4/8           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[75]     0.0    0.00    0.00       8         PairwisePotential::parameters() const [75]
                0.00    0.00       8/16514828     PottsCompatibility::parameters() const [52]
-----------------------------------------------
                0.00    0.00 8257410/8257410     PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [4]
[83]     0.0    0.00    0.00 8257410         DenseKernel::apply_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const [83]
-----------------------------------------------
                                   3             DenseCRF2D::~DenseCRF2D() [84]
                0.00    0.00       1/501020      DenseCRF::unaryEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [68]
                0.00    0.00       2/501020      DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const [44]
                0.00    0.00       2/501020      DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [43]
                0.00    0.00       2/501020      DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
                0.00    0.00   76800/501020      DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.00   76800/501020      Eigen::Matrix<float, -1, 1, 0, -1, 1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, 1, 0, -1, 1> >::lazyAssign<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> >(Eigen::DenseBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> > const&) [88]
                0.00    0.00  117013/501020      Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [86]
                0.00    0.00  230400/501020      expAndNormalize(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [62]
[84]     0.0    0.00    0.00  501020+3       DenseCRF2D::~DenseCRF2D() [84]
                                   3             DenseCRF2D::~DenseCRF2D() [84]
-----------------------------------------------
                0.00    0.00   76800/307200      expAndNormalize(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [62]
                0.00    0.00  230400/307200      DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[85]     0.0    0.00    0.00  307200         Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long) [85]
-----------------------------------------------
                0.00    0.00  117013/117013      std::pair<std::_Rb_tree_iterator<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, bool> std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_insert_unique<Eigen::Matrix<float, -1, 1, 0, -1, 1> const&>(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [45]
[86]     0.0    0.00    0.00  117013         Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [86]
                0.00    0.00  117013/501020      DenseCRF2D::~DenseCRF2D() [84]
-----------------------------------------------
                0.00    0.00      63/76863       sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [21]
                0.00    0.00   76800/76863       sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [47]
[87]     0.0    0.00    0.00   76863         void Eigen::internal::gemv_selector<2, 0, true>::run<Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>, Eigen::Matrix<float, -1, 1, 0, -1, 1> >(Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4> const&, Eigen::Matrix<float, -1, 1, 0, -1, 1>&, Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>::Scalar const&) [87]
-----------------------------------------------
                0.00    0.00   76800/76800       DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[88]     0.0    0.00    0.00   76800         Eigen::Matrix<float, -1, 1, 0, -1, 1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, 1, 0, -1, 1> >::lazyAssign<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> >(Eigen::DenseBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> > const&) [88]
                0.00    0.00   76800/501020      DenseCRF2D::~DenseCRF2D() [84]
-----------------------------------------------
                0.00    0.00   76800/76800       DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[89]     0.0    0.00    0.00   76800         Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>, 3, 0>::run(Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> const&, Eigen::internal::scalar_sum_op<float> const&) [89]
-----------------------------------------------
                0.00    0.00       1/723         expAndNormalize(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [62]
                0.00    0.00       1/723         Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >(Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> > const&) [117]
                0.00    0.00       1/723         Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [115]
                0.00    0.00       2/723         DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [6]
                0.00    0.00       4/723         PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [69]
                0.00    0.00       5/723         DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
                0.00    0.00      34/723         DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
                0.00    0.00      35/723         Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [28]
                0.00    0.00      39/723         DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [71]
                0.00    0.00      39/723         Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [57]
                0.00    0.00     132/723         PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
                0.00    0.00     430/723         DenseKernel::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [11]
[90]     0.0    0.00    0.00     723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                0.00    0.00     218/218         DenseKernel::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [11]
[91]     0.0    0.00    0.00     218         Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const [91]
-----------------------------------------------
                0.00    0.00       6/6           PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const [3]
[92]     0.0    0.00    0.00       6         Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [92]
-----------------------------------------------
                0.00    0.00       1/3           DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [43]
                0.00    0.00       2/3           DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const [44]
[93]     0.0    0.00    0.00       3         Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(long) [93]
-----------------------------------------------
                0.00    0.00       3/3           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[94]     0.0    0.00    0.00       3         _init [94]
-----------------------------------------------
                0.00    0.00       2/2           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[95]     0.0    0.00    0.00       2         DenseKernel::ktype() const [95]
-----------------------------------------------
                0.00    0.00       2/2           DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const [2]
[96]     0.0    0.00    0.00       2         PairwisePotential::ktype() const [96]
-----------------------------------------------
                0.00    0.00       2/2           DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) [70]
[97]     0.0    0.00    0.00       2         void std::vector<PairwisePotential*, std::allocator<PairwisePotential*> >::_M_emplace_back_aux<PairwisePotential* const&>(PairwisePotential* const&) [97]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[98]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z17get_next_labelingRN5Eigen6MatrixIiLin1ELi1ELi0ELin1ELi1EEEi [98]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[99]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z17normalize_unariesRN5Eigen6MatrixIfLin1ELin1ELi0ELin1ELin1EEE [99]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[100]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z35get_color_to_label_map_from_datasetRKSs [100]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[101]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z8make_dirSs [101]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[102]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN13PermutohedralC2Ev [102]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[103]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN16Potts_weight_setC2Efffff [103]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[104]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6KernelD2Ev [104]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[105]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN8DenseCRFC2Eii [105]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [343]
[106]    0.0    0.00    0.00       1         _GLOBAL__sub_I_main [106]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[107]    0.0    0.00    0.00       1         load_image(std::string const&, img_size) [107]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[108]    0.0    0.00    0.00       1         write_down_perf(double, double, double, std::string) [108]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[109]    0.0    0.00    0.00       1         save_map(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, img_size const&, std::string const&, std::string const&) [109]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[110]    0.0    0.00    0.00       1         DenseCRF2D::DenseCRF2D(int, int, int) [110]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[111]    0.0    0.00    0.00       1         DenseCRF2D::~DenseCRF2D() [111]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::setUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [119]
[112]    0.0    0.00    0.00       1         ConstUnaryEnergy::ConstUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [112]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::~DenseCRF() [74]
[113]    0.0    0.00    0.00       1         ConstUnaryEnergy::~ConstUnaryEnergy() [113]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[114]    0.0    0.00    0.00       1         Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const>::CwiseBinaryOp(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::internal::scalar_difference_op<float> const&) [114]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[115]    0.0    0.00    0.00       1         Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [115]
                0.00    0.00       1/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[116]    0.0    0.00    0.00       1         Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >::operator=(Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> const&) [116]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [10]
[117]    0.0    0.00    0.00       1         Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >(Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> > const&) [117]
                0.00    0.00       1/723         Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [90]
-----------------------------------------------
                0.00    0.00       1/1           DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const [43]
[118]    0.0    0.00    0.00       1         float* Eigen::internal::conditional_aligned_new_auto<float, true>(unsigned long) [118]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[119]    0.0    0.00    0.00       1         DenseCRF::setUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [119]
                0.00    0.00       1/1           ConstUnaryEnergy::ConstUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [112]
-----------------------------------------------
                0.00    0.00       1/1           load_unary(std::string const&, img_size&) [46]
[120]    0.0    0.00    0.00       1         ProbImage::decompress(char const*) [120]
-----------------------------------------------
                0.00    0.00       1/1           load_unary(std::string const&, img_size&) [46]
[121]    0.0    0.00    0.00       1         ProbImage::boostToProb() [121]
-----------------------------------------------
                0.00    0.00       1/1           load_unary(std::string const&, img_size&) [46]
[122]    0.0    0.00    0.00       1         ProbImage::ProbImage() [122]
-----------------------------------------------
                0.00    0.00       1/1           load_unary(std::string const&, img_size&) [46]
[123]    0.0    0.00    0.00       1         ProbImage::~ProbImage() [123]
-----------------------------------------------
                0.00    0.00       1/1           minimize_LP(std::string, std::string, Potts_weight_set, std::string, std::string) [1]
[124]    0.0    0.00    0.00       1         DenseCRF::currentMap(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [124]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [98] _GLOBAL__sub_I__Z17get_next_labelingRN5Eigen6MatrixIiLin1ELi1ELi0ELin1ELi1EEEi (brute_force.cpp) [114] Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const>::CwiseBinaryOp(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::internal::scalar_difference_op<float> const&) [39] DenseKernel::ntype() const
  [99] _GLOBAL__sub_I__Z17normalize_unariesRN5Eigen6MatrixIfLin1ELin1ELi0ELin1ELin1EEE (alpha_crf.cpp) [48] Eigen::DiagonalProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::DiagonalWrapper<Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 2>::DiagonalProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::DiagonalWrapper<Eigen::Matrix<float, -1, 1, 0, -1, 1> const> const&) [18] DenseKernel::features() const
 [100] _GLOBAL__sub_I__Z35get_color_to_label_map_from_datasetRKSs (color_to_label.cpp) [88] Eigen::Matrix<float, -1, 1, 0, -1, 1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, 1, 0, -1, 1> >::lazyAssign<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> >(Eigen::DenseBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> > const&) [13] Permutohedral::seqCompute(float*, float const*, int, bool) const
 [101] _GLOBAL__sub_I__Z8make_dirSs (file_storage.cpp) [115] Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [50] Permutohedral::sseCompute(float*, float const*, int, bool) const
 [102] _GLOBAL__sub_I__ZN13PermutohedralC2Ev (permutohedral.cpp) [57] Eigen::Matrix<float, -1, -1, 0, -1, -1>& Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::_set_noalias<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [55] Permutohedral::compute_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const
 [103] _GLOBAL__sub_I__ZN16Potts_weight_setC2Efffff (inference.cpp) [90] Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(long, long) [9] Permutohedral::seqCompute_lower_left(float*, int, int, int) const
 [104] _GLOBAL__sub_I__ZN6KernelD2Ev (pairwise.cpp) [19] Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [51] Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const
 [105] _GLOBAL__sub_I__ZN8DenseCRFC2Eii (densecrf.cpp) [116] Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >::operator=(Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> const&) [91] Permutohedral::compute(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) const
 [106] _GLOBAL__sub_I_main (example_inference.cpp) [26] Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >::lazyAssign<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_multiple_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [53] Permutohedral::gradient(float*, float const*, float const*, int) const
  [16] dotProduct(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1>&) [59] Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_sum_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [37] ConstUnaryEnergy::get() const
 [107] load_image(std::string const&, img_size) [60] Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >& Eigen::SelfCwiseBinaryOp<Eigen::internal::scalar_difference_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::Matrix<float, -1, -1, 0, -1, -1> >::lazyAssign<Eigen::Matrix<float, -1, -1, 0, -1, -1> >(Eigen::DenseBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> > const&) [75] PairwisePotential::parameters() const
  [46] load_unary(std::string const&, img_size&) [33] Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, long, long, long, long) [3] PairwisePotential::apply_lower(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const
  [62] expAndNormalize(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [85] Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long) [40] PairwisePotential::apply_lower2(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1> const&) const
 [108] write_down_perf(double, double, double, std::string) [34] Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, true>::Block(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, long, long, long, long) [41] PairwisePotential::applyTranspose(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  [30] descent_direction(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [86] Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [4] PairwisePotential::apply_lower_sorted(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const
  [58] valid_probability(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [93] Eigen::Matrix<float, -1, 1, 0, -1, 1>::Matrix(long) [12] PairwisePotential::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
 [109] save_map(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, img_size const&, std::string const&, std::string const&) [92] Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [96] PairwisePotential::ktype() const
  [47] sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [117] Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> >(Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> > const> > const&) [73] PairwisePotential::features() const
  [21] sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&) [28] Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> >(Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, Eigen::Matrix<float, -1, -1, 0, -1, -1> const, Eigen::Matrix<float, -1, -1, 0, -1, -1> const> > const&) [52] PottsCompatibility::parameters() const
  [72] DenseCRF2D::addPairwiseGaussian(float, float, LabelCompatibility*, KernelType, NormalizationType) [17] Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> >(Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, -1, -1, true> > const&) [22] PottsCompatibility::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  [71] DenseCRF2D::addPairwiseBilateral(float, float, float, float, float, unsigned char const*, LabelCompatibility*, KernelType, NormalizationType) [29] Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix<int, int>(int const&, int const&) [42] DiagonalCompatibility::matrixForm(int) const
 [110] DenseCRF2D::DenseCRF2D(int, int, int) [89] Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<float>, Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true>, 3, 0>::run(Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, 1, true> const&, Eigen::internal::scalar_sum_op<float> const&) [124] DenseCRF::currentMap(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  [84] DenseCRF2D::~DenseCRF2D() [87] void Eigen::internal::gemv_selector<2, 0, true>::run<Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>, Eigen::Matrix<float, -1, 1, 0, -1, 1> >(Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4> const&, Eigen::Matrix<float, -1, 1, 0, -1, 1>&, Eigen::GeneralProduct<Eigen::Matrix<float, -1, -1, 0, -1, -1>, Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<float>, Eigen::Matrix<float, -1, 1, 0, -1, 1> const>, 4>::Scalar const&) [54] DenseCRF::unary_init() const
 [111] DenseCRF2D::~DenseCRF2D() [65] Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false>::~gemm_blocking_space() [68] DenseCRF::unaryEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const
   [6] DenseKernel::initLattice(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [118] float* Eigen::internal::conditional_aligned_new_auto<float, true>(unsigned long) [2] DenseCRF::lp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1>&) const
  [63] DenseKernel::merge(Kernel const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, bool) [49] Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>::run(long, long, long, float const*, long, float const*, long, float*, long, float, Eigen::internal::level3_blocking<float, float>&, Eigen::internal::GemmParallelInfo<long>*) [10] DenseCRF::qp_inference(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  [23] DenseKernel::~DenseKernel() [38] Kernel::~Kernel() [35] DenseCRF::compute_energy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
  [64] Permutohedral::add(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [67] AlphaCRF::sequential_inference() [44] DenseCRF::pairwiseEnergy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&, int) const
   [7] Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, int) [119] DenseCRF::setUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [43] DenseCRF::assignment_energy(Eigen::Matrix<short, -1, 1, 0, -1, 1> const&) const
  [27] Permutohedral::Permutohedral() [70] DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) [8] DenseCRF::compute_energy_LP(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, PairwisePotential**, int) const
 [112] ConstUnaryEnergy::ConstUnaryEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) [74] DenseCRF::~DenseCRF() [14] DenseCRF::compute_LR_QP_value(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const
 [113] ConstUnaryEnergy::~ConstUnaryEnergy() [120] ProbImage::decompress(char const*) [15] std::vector<Permutohedral::Neighbors, std::allocator<Permutohedral::Neighbors> >::_M_default_append(unsigned long)
  [69] PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [121] ProbImage::boostToProb() [97] void std::vector<PairwisePotential*, std::allocator<PairwisePotential*> >::_M_emplace_back_aux<PairwisePotential* const&>(PairwisePotential* const&)
   [5] PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType, int) [clone .constprop.253] (pairwise.cpp) [122] ProbImage::ProbImage() [45] std::pair<std::_Rb_tree_iterator<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, bool> std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_insert_unique<Eigen::Matrix<float, -1, 1, 0, -1, 1> const&>(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&)
  [20] PairwisePotential::~PairwisePotential() [123] ProbImage::~ProbImage() [61] std::_Rb_tree<Eigen::Matrix<float, -1, 1, 0, -1, 1>, Eigen::Matrix<float, -1, 1, 0, -1, 1>, std::_Identity<Eigen::Matrix<float, -1, 1, 0, -1, 1> >, classcomp, std::allocator<Eigen::Matrix<float, -1, 1, 0, -1, 1> > >::_M_erase(std::_Rb_tree_node<Eigen::Matrix<float, -1, 1, 0, -1, 1> >*)
  [24] PairwisePotential::~PairwisePotential() [66] DenseKernel::parameters() const [56] void std::__introsort_loop<int*, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortCols(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) (stl_algo.h)
  [31] PottsCompatibility::PottsCompatibility(float) [83] DenseKernel::apply_lower_left(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, int, int) const [25] void std::__introsort_loop<int*, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}>(int*, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}, long, sortRows(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&)::{lambda(int, int)#1}) (stl_algo.h)
  [36] PottsCompatibility::~PottsCompatibility() [11] DenseKernel::apply(Eigen::Matrix<float, -1, -1, 0, -1, -1>&, Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) const [94] _init
  [32] MatrixCompatibility::setParameters(Eigen::Matrix<float, -1, 1, 0, -1, 1> const&) [95] DenseKernel::ktype() const
